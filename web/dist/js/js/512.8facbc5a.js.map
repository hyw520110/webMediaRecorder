{"version":3,"file":"js/js/512.8facbc5a.js","mappings":"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","sources":["webpack://web/./node_modules/audio-recorder-polyfill/wave-encoder/index.js","webpack://web/./node_modules/audio-recorder-polyfill/index.js"],"sourcesContent":["// Copied from https://github.com/chris-rudmin/Recorderjs\n\nexport default () => {\n  let BYTES_PER_SAMPLE = 2\n\n  let recorded = []\n\n  function encode (buffer) {\n    let length = buffer.length\n    let data = new Uint8Array(length * BYTES_PER_SAMPLE)\n    for (let i = 0; i < length; i++) {\n      let index = i * BYTES_PER_SAMPLE\n      let sample = buffer[i]\n      if (sample > 1) {\n        sample = 1\n      } else if (sample < -1) {\n        sample = -1\n      }\n      sample = sample * 32768\n      data[index] = sample\n      data[index + 1] = sample >> 8\n    }\n    recorded.push(data)\n  }\n\n  function dump (sampleRate) {\n    let bufferLength = recorded.length ? recorded[0].length : 0\n    let length = recorded.length * bufferLength\n    let wav = new Uint8Array(44 + length)\n    let view = new DataView(wav.buffer)\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false)\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true)\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false)\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false)\n    // format chunk length\n    view.setUint32(16, 16, true)\n    // sample format (raw)\n    view.setUint16(20, 1, true)\n    // channel count\n    view.setUint16(22, 1, true)\n    // sample rate\n    view.setUint32(24, sampleRate, true)\n    // byte rate (sample rate * block align)\n    view.setUint32(28, sampleRate * BYTES_PER_SAMPLE, true)\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, BYTES_PER_SAMPLE, true)\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true)\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false)\n    // data chunk length\n    view.setUint32(40, length, true)\n\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let i = 0; i < recorded.length; i++) {\n      wav.set(recorded[i], i * bufferLength + 44)\n    }\n\n    recorded = []\n    postMessage(wav.buffer, [wav.buffer])\n  }\n\n  onmessage = e => {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1])\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1])\n    }\n  }\n}\n","import waveEncoder from './wave-encoder/index.js'\n\nlet AudioContext = window.AudioContext || window.webkitAudioContext\n\nlet createWorker = fn => {\n  let js = fn\n    .toString()\n    .replace(/^(\\(\\)\\s*=>|function\\s*\\(\\))\\s*{/, '')\n    .replace(/}$/, '')\n  let blob = new Blob([js])\n  return new Worker(URL.createObjectURL(blob))\n}\n\nlet error = method => {\n  let event = new Event('error')\n  event.data = new Error('Wrong state for ' + method)\n  return event\n}\n\nlet context\n\n/**\n * Audio Recorder with MediaRecorder API.\n *\n * @example\n * navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n *   let recorder = new MediaRecorder(stream)\n * })\n */\nclass MediaRecorder {\n  /**\n   * @param {MediaStream} stream The audio stream to record.\n   */\n  constructor (stream, config = null) {\n    /**\n     * The `MediaStream` passed into the constructor.\n     * @type {MediaStream}\n     */\n    this.stream = stream\n    this.config = config\n    /**\n     * The current state of recording process.\n     * @type {\"inactive\"|\"recording\"|\"paused\"}\n     */\n    this.state = 'inactive'\n\n    this.em = document.createDocumentFragment()\n    this.encoder = createWorker(MediaRecorder.encoder)\n\n    let recorder = this\n    this.encoder.addEventListener('message', e => {\n      let event = new Event('dataavailable')\n      event.data = new Blob([e.data], { type: recorder.mimeType })\n      recorder.em.dispatchEvent(event)\n      if (recorder.state === 'inactive') {\n        recorder.em.dispatchEvent(new Event('stop'))\n      }\n    })\n  }\n\n  /**\n   * Begins recording media.\n   *\n   * @param {number} [timeslice] The milliseconds to record into each `Blob`.\n   *                             If this parameter isnâ€™t included, single `Blob`\n   *                             will be recorded.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recordButton.addEventListener('click', () => {\n   *   recorder.start()\n   * })\n   */\n  start (timeslice) {\n    if (this.state !== 'inactive') {\n      return this.em.dispatchEvent(error('start'))\n    }\n\n    this.state = 'recording'\n\n    if (!context) {\n      context = new AudioContext(this.config)\n    }\n    this.clone = this.stream.clone()\n    this.input = context.createMediaStreamSource(this.clone)\n    this.processor = context.createScriptProcessor(2048, 1, 1)\n\n    this.encoder.postMessage(['init', context.sampleRate])\n\n    this.processor.onaudioprocess = e => {\n      if (this.state === 'recording') {\n        this.encoder.postMessage(['encode', e.inputBuffer.getChannelData(0)])\n      }\n    }\n\n    this.input.connect(this.processor)\n    this.processor.connect(context.destination)\n\n    this.em.dispatchEvent(new Event('start'))\n\n    if (timeslice) {\n      this.slicing = setInterval(() => {\n        if (this.state === 'recording') this.requestData()\n      }, timeslice)\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop media capture and raise `dataavailable` event with recorded data.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * finishButton.addEventListener('click', () => {\n   *   recorder.stop()\n   * })\n   */\n  stop () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('stop'))\n    }\n\n    this.requestData()\n    this.state = 'inactive'\n    this.clone.getTracks().forEach(track => {\n      track.stop()\n    })\n    this.processor.disconnect()\n    this.input.disconnect()\n    return clearInterval(this.slicing)\n  }\n\n  /**\n   * Pauses recording of media streams.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * pauseButton.addEventListener('click', () => {\n   *   recorder.pause()\n   * })\n   */\n  pause () {\n    if (this.state !== 'recording') {\n      return this.em.dispatchEvent(error('pause'))\n    }\n\n    this.state = 'paused'\n    return this.em.dispatchEvent(new Event('pause'))\n  }\n\n  /**\n   * Resumes media recording when it has been previously paused.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * resumeButton.addEventListener('click', () => {\n   *   recorder.resume()\n   * })\n   */\n  resume () {\n    if (this.state !== 'paused') {\n      return this.em.dispatchEvent(error('resume'))\n    }\n\n    this.state = 'recording'\n    return this.em.dispatchEvent(new Event('resume'))\n  }\n\n  /**\n   * Raise a `dataavailable` event containing the captured media.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * this.on('nextData', () => {\n   *   recorder.requestData()\n   * })\n   */\n  requestData () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('requestData'))\n    }\n\n    return this.encoder.postMessage(['dump', context.sampleRate])\n  }\n\n  /**\n   * Add listener for specified event type.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The listener function.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recorder.addEventListener('dataavailable', e => {\n   *   audio.src = URL.createObjectURL(e.data)\n   * })\n   */\n  addEventListener (...args) {\n    this.em.addEventListener(...args)\n  }\n\n  /**\n   * Remove event listener.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The same function used in `addEventListener`.\n   *\n   * @return {undefined}\n   */\n  removeEventListener (...args) {\n    this.em.removeEventListener(...args)\n  }\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {Event} event The event object.\n   *\n   * @return {boolean} Is event was no canceled by any listener.\n   */\n  dispatchEvent (...args) {\n    this.em.dispatchEvent(...args)\n  }\n}\n\n/**\n * The MIME type that is being used for recording.\n * @type {string}\n */\nMediaRecorder.prototype.mimeType = 'audio/wav'\n\n/**\n * Returns `true` if the MIME type specified is one the polyfill can record.\n *\n * This polyfill supports `audio/wav` and `audio/mpeg`.\n *\n * @param {string} mimeType The mimeType to check.\n *\n * @return {boolean} `true` on `audio/wav` and `audio/mpeg` MIME type.\n */\nMediaRecorder.isTypeSupported = mimeType => {\n  return MediaRecorder.prototype.mimeType === mimeType\n}\n\n/**\n * `true` if MediaRecorder can not be polyfilled in the current browser.\n * @type {boolean}\n *\n * @example\n * if (MediaRecorder.notSupported) {\n *   showWarning('Audio recording is not supported in this browser')\n * }\n */\nMediaRecorder.notSupported = !navigator.mediaDevices || !AudioContext\n\n/**\n * Converts RAW audio buffer to compressed audio files.\n * It will be loaded to Web Worker.\n * By default, WAVE encoder will be used.\n * @type {function}\n *\n * @example\n * MediaRecorder.prototype.mimeType = 'audio/ogg'\n * MediaRecorder.encoder = oggEncoder\n */\nMediaRecorder.encoder = waveEncoder\n\nexport default MediaRecorder\n"],"names":["BYTES_PER_SAMPLE","recorded","encode","buffer","length","data","Uint8Array","i","index","sample","push","dump","sampleRate","bufferLength","wav","view","DataView","setUint32","setUint16","set","postMessage","onmessage","e","context","AudioContext","window","webkitAudioContext","createWorker","fn","js","toString","replace","blob","Blob","Worker","URL","createObjectURL","error","method","event","Event","Error","MediaRecorder","constructor","stream","config","this","state","em","document","createDocumentFragment","encoder","recorder","addEventListener","type","mimeType","dispatchEvent","start","timeslice","clone","input","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","inputBuffer","getChannelData","connect","destination","slicing","setInterval","requestData","stop","getTracks","forEach","track","disconnect","clearInterval","pause","resume","args","removeEventListener","prototype","isTypeSupported","notSupported","navigator","mediaDevices"],"sourceRoot":""}